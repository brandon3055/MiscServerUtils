buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
}

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mcversion}-${config.mod_version}"
group = "com.brandon3055.miscserverutils"
archivesBaseName = "MiscServerUtils"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

minecraft {
    version = config.mcversion + "-" + config.forge_version
    runDir = "run"
    mappings = "${config.mcp_mappings}"
    replace '${mod_version}', project.config.mod_version
    replaceIn "MiscServerUtils.java"
    makeObfSourceJar = false
}

String buildNo = "0"
if(System.getenv("BUILD_NUMBER") != null){
    buildNo = System.getenv("BUILD_NUMBER")
}
version = version + ".${buildNo}"

dependencies {

}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
            rename '(.+_at.cfg)', 'META-INF/$1'
        }

def commonManifest = {
//    attributes 'FMLAT': 'BrandonsCore_at.cfg'
}


jar {
    classifier = 'universal'
    manifest commonManifest
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest commonManifest
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'MiscServerUtils'
                        url 'https://github.com/brandon3055/MiscServerUtils'
                        scm {
                            url 'https://github.com/brandon3055/MiscServerUtils'
                            connection 'scm:git:git@github.com:brandon3055/MiscServerUtils.git'
                            developerConnection 'scm:git:git@github.com:brandon3055/MiscServerUtils.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/brandon3055/MiscServerUtils/issues'
                        }
                        licenses {
                            license {
                                name 'License'
                                url 'https://github.com/brandon3055/MiscServerUtils/master/LICENSE.txt'
                                distribution 'repo'
                            }
                        }
                        developers {
                            developer {
                                id 'brandon3055'
                                name 'brandon3055'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            } else {
                println 'Maven upload triggered but no local_maven property found!'
            }
        }
    }
}
